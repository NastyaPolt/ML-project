from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
from tensorflow.keras.layers import Conv2D, Flatten, Dense, AvgPool2D
from tensorflow.keras.optimizers import Adam

def load_train(path):
    train_datagen = ImageDataGenerator(rescale=1/255.)
    
    #rotation_range =90, 
    #width_shift_range=0.2, 
    #height_shift_range =0.2,horizontal_flip=True,vertical_flip=True)
    train_datagen_flow = train_datagen.flow_from_directory(
    path,
    target_size=(150, 150),
    batch_size=16,
    class_mode='sparse',
    seed=12345)
    
    return train_datagen_flow

def create_model(input_shape):
    optimizer = Adam()
    optimizer = Adam(lr=0.01) 
    model = Sequential()
    model.add(Conv2D(6, (5, 5), padding='same', activation='relu',
                 input_shape=input_shape))

    model.add(AvgPool2D(pool_size=(2, 2)))

    model.add(Conv2D(16, (5, 5), padding='valid', activation='relu',
                 input_shape=input_shape))
    model.add(AvgPool2D(pool_size=(2, 2)))
    model.add(Flatten())

    model.add(Dense(units=120,  activation = 'relu')) 
    model.add(Dense(units=84, activation = 'relu')) 
    model.add(Dense(units=12,  activation = 'softmax')) 

    
    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', 
              metrics=['acc']) 

    return model 

def train_model(model,train_data, test_data, batch_size=None, epochs=10,
               steps_per_epoch=None, validation_steps=None):
    
    if steps_per_epoch is None:
        steps_per_epoch = len(train_data)
    if validation_steps is None:
        validation_steps = len(test_data)


    model.fit(train_data,
              validation_data=test_data,
              steps_per_epoch=steps_per_epoch,
              epochs=epochs,
              validation_steps=validation_steps,
              verbose=2, shuffle=True)

    return model 
